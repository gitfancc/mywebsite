package com.appscomm.sport.utils;

import java.io.BufferedReader;
import java.io.File;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.Enumeration;
import java.util.List;
import java.util.Map;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.apache.commons.lang3.StringUtils;
import org.apache.http.Header;
import org.apache.http.HttpEntity;
import org.apache.http.HttpResponse;
import org.apache.http.client.HttpClient;
import org.apache.http.client.entity.UrlEncodedFormEntity;
import org.apache.http.client.methods.HttpPost;
import org.apache.http.entity.ContentType;
import org.apache.http.entity.FileEntity;
import org.apache.http.entity.StringEntity;
import org.apache.http.entity.mime.MultipartEntity;
import org.apache.http.entity.mime.MultipartEntityBuilder;
import org.apache.http.entity.mime.content.FileBody;
import org.apache.http.entity.mime.content.StringBody;
import org.apache.http.impl.client.DefaultHttpClient;
import org.apache.log4j.Logger;
import org.apache.struts2.ServletActionContext;

import com.opensymphony.xwork2.ActionContext;


/**
 * 基于HTTP承载方式处理请求与响应实用类
 */
@SuppressWarnings("deprecation")
public class HttpUtils {

	/** 日志对象 */
	private static final Logger log = Logger.getLogger(HttpUtils.class);
	
	/** 默认编码 */
	private static String encoding = "UTF-8";
	
	private static HttpClient httpClient ;

	/** 默认内容类型 */
	private static String contentType = "text/xml;charset=" + encoding;
	
	/**
	 * 接收HTTP请求字符串
	 * 
	 * @return
	 */
	public static String receiveRequest() {
		BufferedReader br = null;
		StringBuffer requestBuf = new StringBuffer();
		try {
			String line = null;
			HttpServletRequest request = ServletActionContext.getRequest();
			String sessionId = request.getSession().getId();
			log.info(request.getHeader("oauthToken")+"----"+request.getHeader("clientType")+"----"+request.getHeader("version")+"----"+request.getHeader("weblogid"));
			request.setCharacterEncoding(encoding);
			br = request.getReader();
			while ((line = br.readLine()) != null) {
				requestBuf.append(line);
				requestBuf.append("\n");
			}
		} catch (Exception e) {
			log.error("接收请求报文时发生错误:"+e);
		} finally {
			if (br != null) {
				try {
					br.close();
				} catch (Exception ex) {
					br = null;
				}
			}
		}
		return requestBuf.toString();
	}
	
	/**
	 * 接受http请求
	 * 
	 * @return
	 */
	public static String getHeader(String key){
		 ActionContext context = ServletActionContext.getContext();
		 HttpServletRequest request = ServletActionContext.getRequest();
		 return request.getHeader(key);
	}
	
	public static Map<String, Object> receiveRequestMap(){
		 ActionContext context = ServletActionContext.getContext();
		 HttpServletRequest request = ServletActionContext.getRequest();
		// log.info(request.getHeader("oauthToken")+"----"+request.getHeader("clientType")+"----"+request.getHeader("version")+"----"+request.getHeader("weblogid"));
		 Map<String, Object> requestMap =context.getParameters();
		
		// header
		 StringBuffer sb = new StringBuffer("URI:"+request.getRequestURL()+"\n");
		 try{
			Enumeration headerNames = request.getHeaderNames();
			while (headerNames.hasMoreElements()) {
				String key = (String) headerNames.nextElement();
				String value = request.getHeader(key);
				sb.append(key).append("=").append(value).append("\n");
			}
			
			 for(String paramKey : requestMap.keySet()){
				 sb.append(paramKey).append("=").append(((String[])requestMap.get(paramKey))[0]).append(";");
			 }
			 log.debug("input param："+ sb.toString());
		 }catch(Exception e){
			 log.info("get param error:" + sb.toString());
		 }
		 
		 
		 String clientType = request.getHeader("clientType");
		 String clientVersion =  request.getHeader("version");
		 if(StringUtils.isBlank(clientType)) clientType= "";
		 if(StringUtils.isBlank(clientVersion)) clientVersion = "";
		 requestMap.put("HeadClientType",  clientType);
		 requestMap.put("HeadVersion", clientVersion);
		 
		 return requestMap;
	}
	
	@SuppressWarnings("deprecation")
	public static String sendRequest(String url,List<Header> headers, String requestStr) throws IOException {
		if(httpClient == null)
			httpClient = new DefaultHttpClient();
		StringBuffer responseBuf = new StringBuffer();
		try {
			// 构造POST请求
			HttpPost httpPost = new HttpPost(url);
			for(Header h : headers){
				httpPost.setHeader(h);
			}
			StringEntity reqEntity = new StringEntity(requestStr, encoding);
			reqEntity.setContentType("application/x-www-form-urlencoded");
			httpPost.setEntity(reqEntity);
			
			// 发送POST请求
			HttpResponse response = httpClient.execute(httpPost);
			HttpEntity responseEntity = response.getEntity();
			
			BufferedReader br = null;
			try {
				String line = null;
				br = new BufferedReader(new InputStreamReader(responseEntity.getContent()));
				while ((line = br.readLine()) != null) {
					responseBuf.append(line);
					responseBuf.append("\n");
				}
			} finally {
				if (br != null) {
					try {
						br.close();
					} catch (Exception ex) {
						br = null;
					}
				}
			}
		} finally { 
			//httpClient.getConnectionManager().shutdown();
		}
		
		return responseBuf.toString();
	}
	
	@SuppressWarnings({ "rawtypes", "deprecation", "unchecked" })
	public static String sendRequest(String url,List<Header> headers, List  params) throws IOException {
		if(httpClient == null)
			httpClient = new DefaultHttpClient();
		StringBuffer responseBuf = new StringBuffer();
		try {
			// 构造POST请求
			HttpPost httpPost = new HttpPost(url);
			for(Header h : headers){
				httpPost.setHeader(h);
			}
			httpPost.setEntity(new UrlEncodedFormEntity(params, encoding));
			// 发送POST请求
			HttpResponse response = httpClient.execute(httpPost);
			HttpEntity responseEntity = response.getEntity();
			
			BufferedReader br = null;
			try {
				String line = null;
				br = new BufferedReader(new InputStreamReader(responseEntity.getContent()));
				while ((line = br.readLine()) != null) {
					responseBuf.append(line);
					responseBuf.append("\n");
				}
			} finally {
				if (br != null) {
					try {
						br.close();
					} catch (Exception ex) {
						br = null;
					}
				}
			}
		} finally { 
		}
		
		return responseBuf.toString();
	}
	public static String sendRequest(String url,List<Header> headers, String userId, String fileParamName, File file) throws IOException {
		if(httpClient == null)
			httpClient = new DefaultHttpClient();
		StringBuffer responseBuf = new StringBuffer();
		try {
			// 构造POST请求
			HttpPost httpPost = new HttpPost(url);
			for(Header h : headers){
				httpPost.setHeader(h);
			}
			if(file != null){
//				 FileEntity reqEntity = new FileEntity(file, "binary/octet-stream");
//				 httpPost.setEntity(reqEntity);
//				 reqEntity.setContentType("binary/octet-stream");
//				 
//				 MultipartEntity mutiEntity = new MultipartEntity();
//				 mutiEntity.addPart(fileParamName, new FileBody(file));
				 FileBody bin = new FileBody(file);
		         StringBody comment = new StringBody("A binary file of some kind", ContentType.TEXT_PLAIN);
		         StringBody userIdbody = new StringBody(userId, ContentType.TEXT_PLAIN);
		          HttpEntity reqEntity = MultipartEntityBuilder.create()
		                    .addPart(fileParamName, bin)
		                    .addPart("comment", comment)
		                    .addPart("userId", userIdbody)
		                    .build();
		          httpPost.setEntity(reqEntity);

			}
			// 发送POST请求
			HttpResponse response = httpClient.execute(httpPost);
			HttpEntity responseEntity = response.getEntity();
			
			BufferedReader br = null;
			try {
				String line = null;
				br = new BufferedReader(new InputStreamReader(responseEntity.getContent()));
				while ((line = br.readLine()) != null) {
					responseBuf.append(line);
					responseBuf.append("\n");
				}
			} finally {
				if (br != null) {
					try {
						br.close();
					} catch (Exception ex) {
						br = null;
					}
				}
			}
		} finally { 
		}
		
		return responseBuf.toString();
	}
	/**
	 * 发送HTTP响应字符串
	 * 
	 * @param responseStr
	 */
	public static void sendResponse(String responseStr,Map<String, Object> requestMap) {
		try {
			HttpServletResponse response = ServletActionContext.getResponse();
			response.setHeader("Content-Type", contentType);
			response.getWriter().write(responseStr);
			response.getWriter().flush();
			log.debug(responseStr);
		} catch (IOException e) {
			log.error("发送响应报文时发生错误:"+e);
		}
	}
	public static void sendResponseJson(String responseStr,Map<String, Object> requestMap) {
		try {
			HttpServletResponse response = ServletActionContext.getResponse();
			response.setHeader("Content-Type", "application/json");
			response.getWriter().write(responseStr);
			response.getWriter().flush();
			log.debug(responseStr);
		} catch (IOException e) {
			log.error("发送响应报文时发生错误:"+e);
		}
	}
}
